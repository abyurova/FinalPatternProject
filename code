{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import pandas\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.model_selection import cross_val_score\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   meanfreq        sd    median       Q25       Q75       IQR      skew  \\\n",
      "0  0.243528  0.027376  0.248505  0.233405  0.257997  0.024592  2.822300   \n",
      "1  0.165977  0.057358  0.174284  0.110656  0.212025  0.101369  1.144319   \n",
      "2  0.224698  0.033298  0.226417  0.218011  0.237974  0.019962  3.128295   \n",
      "3  0.166018  0.058283  0.177134  0.109037  0.212726  0.103688  1.350262   \n",
      "4  0.243528  0.027376  0.248505  0.233405  0.257997  0.024592  2.822300   \n",
      "5  0.169554  0.056787  0.185714  0.109796  0.208571  0.098776  2.649155   \n",
      "\n",
      "        kurt    sp.ent       sfm      mode  centroid   meanfun    minfun  \\\n",
      "0  12.088959  0.782802  0.099058  0.254545  0.243528  0.204210  0.047431   \n",
      "1   4.186892  0.940428  0.480574  0.096429  0.165977  0.095782  0.016032   \n",
      "2  13.756715  0.791817  0.184991  0.221689  0.224698  0.189976  0.054237   \n",
      "3   4.574904  0.935346  0.509350  0.213343  0.166018  0.097317  0.016736   \n",
      "4  12.088959  0.782802  0.099058  0.254545  0.243528  0.204210  0.047431   \n",
      "5  13.082606  0.917171  0.439121  0.194286  0.169554  0.089936  0.020126   \n",
      "\n",
      "     maxfun   meandom    mindom     maxdom   dfrange   modindx  \n",
      "0  0.279070  1.380729  0.234375  10.078125  9.843750  0.121312  \n",
      "1  0.216216  0.614020  0.007812   3.687500  3.679688  0.223520  \n",
      "2  0.269663  1.580915  0.234375   8.484375  8.250000  0.135866  \n",
      "3  0.262295  0.469806  0.007812   3.609375  3.601562  0.188178  \n",
      "4  0.279070  1.380729  0.234375  10.078125  9.843750  0.121312  \n",
      "5  0.200000  0.338976  0.101562   2.562500  2.460938  0.148459  \n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/ainurabyurova/anaconda/lib/python2.7/site-packages/ipykernel_launcher.py:7: DeprecationWarning: \n",
      ".ix is deprecated. Please use\n",
      ".loc for label based indexing or\n",
      ".iloc for positional indexing\n",
      "\n",
      "See the documentation here:\n",
      "http://pandas.pydata.org/pandas-docs/stable/indexing.html#deprecate_ix\n",
      "  import sys\n",
      "/Users/ainurabyurova/anaconda/lib/python2.7/site-packages/ipykernel_launcher.py:16: DeprecationWarning: \n",
      ".ix is deprecated. Please use\n",
      ".loc for label based indexing or\n",
      ".iloc for positional indexing\n",
      "\n",
      "See the documentation here:\n",
      "http://pandas.pydata.org/pandas-docs/stable/indexing.html#deprecate_ix\n",
      "  app.launch_new_instance()\n"
     ]
    }
   ],
   "source": [
    "# -------------------------------------------------------------------------------\n",
    "# Get Data\n",
    "\n",
    "audio_char = pandas.read_csv('../training.csv')\n",
    "# print(audio_char.head())\n",
    "\n",
    "inputChar = audio_char.ix[:, 0:20]\n",
    "outputChar = audio_char['label']\n",
    "#print (inputChar.head())\n",
    "#print (outputChar.head())\n",
    "\n",
    "testChar = pandas.read_csv('../test1.csv')\n",
    "# testChar = pandas.read_csv('../test1.csv')\n",
    "# testChar = pandas.read_csv('../test.csv')\n",
    "\n",
    "input_test = testChar.ix[:, 0:20]\n",
    "print(input_test)\n",
    "output_test = testChar['label']\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# -------------------------------------------------------------------------------\n",
    "# XGBoost\n",
    "\n",
    "\n",
    "# print \"The expected output is-\"\n",
    "# print(output_test)\n",
    "# accuracy = accuracy_score(output_test, output_pred)\n",
    "# print \"Accuracy with XGBoost Classifier:\"\n",
    "# print(\"Accuracy: %.2f%%\" % (accuracy * 100.0))\n",
    "\n",
    "# 10 fold cross-validation\n",
    "# cross_validation_accuracy = cross_val_score(model, inputChar, outputChar, cv=10)\n",
    "# cross_validation_accuracy *= 100\n",
    "# print cross_validation_accuracy\n",
    "# accuracy_sum = sum(cross_validation_accuracy)\n",
    "# print \"Average accuracy = \" + str(accuracy_sum / 10)\n",
    "\n",
    "# -------------------------------------------------------------------------------\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using SVM:\n",
      "CLassifier\n",
      "[[ 0.15810799  0.08278159  0.19119145 ...,  0.7421875   0.6953125\n",
      "   0.33988764]\n",
      " [ 0.18285544  0.06778888  0.20063872 ...,  0.8046875   0.75        0.26923077]\n",
      " [ 0.19980652  0.06197378  0.21135764 ...,  0.8984375   0.84375     0.3295207 ]\n",
      " ..., \n",
      " [ 0.17077777  0.06386476  0.17179077 ...,  0.79589844  0.71777344\n",
      "   0.60252672]\n",
      " [ 0.16235017  0.0603346   0.1400848  ...,  0.77148438  0.68359375  0.6       ]\n",
      " [ 0.15878119  0.05985249  0.14701299 ...,  0.78613281  0.69824219\n",
      "   0.55211455]]\n",
      "The predicted output is-\n",
      "['female' 'male' 'female' 'male' 'female' 'male']\n",
      "The expected output is-\n",
      "0    female\n",
      "1      male\n",
      "2    female\n",
      "3      male\n",
      "4    female\n",
      "5      male\n",
      "Name: label, dtype: object\n",
      "Accuracy with SVM Classifier:\n",
      "Accuracy: 100.00%\n"
     ]
    }
   ],
   "source": [
    "# SVM\n",
    "\n",
    "from sklearn import svm\n",
    "\n",
    "print \"Using SVM:\"\n",
    "\n",
    "classifier = svm.SVC()\n",
    "classifier.fit(inputChar, outputChar)\n",
    "print \"CLassifier\"\n",
    "print (classifier.support_vectors_)\n",
    "\n",
    "results = classifier.predict(input_test)\n",
    "\n",
    "print \"The predicted output is-\"\n",
    "print(results)\n",
    "print \"The expected output is-\"\n",
    "print(output_test)\n",
    "#\n",
    "accuracy = accuracy_score(output_test, results)\n",
    "print \"Accuracy with SVM Classifier:\"\n",
    "print(\"Accuracy: %.2f%%\" % (accuracy * 100.0))\n",
    "\n",
    "#10 fold cross-validation\n",
    "#cross_validation_accuracy = cross_val_score(classifier, inputChar, outputChar, cv=10)\n",
    "#cross_validation_accuracy *= 100\n",
    "#print cross_validation_accuracy\n",
    "#accuracy_sum = sum(cross_validation_accuracy)\n",
    "#print \"Average accuracy = \" + str(accuracy_sum / 10)\n",
    "\n",
    "#w = classifier.coef_[0]\n",
    "#a = -w[0] / w[1]\n",
    "#xx = np.linspace(-5, 5)\n",
    "#yy = a * xx - (classifier.intercept_[0]) / w[1]\n",
    "#\n",
    "# # plot the parallels to the separating hyperplane that pass through the\n",
    "# # support vectors\n",
    "#b = classifier.support_vectors_[0]\n",
    "#yy_down = a * xx + (b[1] - a * b[0])\n",
    "#b = classifier.support_vectors_[-1]\n",
    "#yy_up = a * xx + (b[1] - a * b[0])\n",
    "#\n",
    "# # plot the line, the points, and the nearest vectors to the plane\n",
    "#plt.plot(xx, yy, 'k-')\n",
    "#plt.plot(xx, yy_down, 'k--')\n",
    "#plt.plot(xx, yy_up, 'k--')\n",
    "#\n",
    "#plt.scatter(classifier.support_vectors_[:, 0], classifier.support_vectors_[:, 1],\n",
    "           # s=80, facecolors='r')\n",
    "#plt.scatter(X[:, 0], X[:, 1], c=Y, cmap=plt.cm.Paired)\n",
    "#plt.xlim(-1, 1)\n",
    "#plt.ylim(-1, 1)\n",
    "#plt.title(\"Support vectors\")\n",
    "#plt.axis('tight')\n",
    "#plt.show()\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
